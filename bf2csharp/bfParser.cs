//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from bf.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using System;
using System.Text;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class bfParser : Parser
{
    protected static DFA[] decisionToDFA;
    protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
    public const int
        LBRACKET = 1, RBRACKET = 2, PLUS = 3, MINUS = 4, LT = 5, GT = 6, OUT = 7, IN = 8, WS = 9;
    public const int
        RULE_program = 0, RULE_block = 1, RULE_listOfPlus = 2, RULE_listOfMinus = 3,
        RULE_listOfLt = 4, RULE_listOfGt = 5;
    public static readonly string[] ruleNames = {
        "program", "block", "listOfPlus", "listOfMinus", "listOfLt", "listOfGt"
    };

    private static readonly string[] _LiteralNames = {
        null, "'['", "']'", "'+'", "'-'", "'<'", "'>'", "'.'", "','"
    };
    private static readonly string[] _SymbolicNames = {
        null, "LBRACKET", "RBRACKET", "PLUS", "MINUS", "LT", "GT", "OUT", "IN",
        "WS"
    };
    public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

    [NotNull]
    public override IVocabulary Vocabulary
    {
        get
        {
            return DefaultVocabulary;
        }
    }

    public override string GrammarFileName { get { return "bf.g4"; } }

    public override string[] RuleNames { get { return ruleNames; } }

    public override string SerializedAtn { get { return new string(_serializedATN); } }

    static bfParser()
    {
        decisionToDFA = new DFA[_ATN.NumberOfDecisions];
        for (int i = 0; i < _ATN.NumberOfDecisions; i++)
        {
            decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
        }
    }


    #region { @parser::members }
    private const string BeginPart =
@"
using System;
namespace Brainfuck.UserGenerated
{
    class Program
    {
        static void Main(string[] args)
        {
            char[] data = new char[30000];
            int cursor = 0;
";

    private const string EndPart =
@"
        }
    }
}";

    private StringBuilder sb = new StringBuilder();
    private string _program;
    public string FinalProgram { get { return _program; } }

    private byte _indent = 3;
    private void push_back(string code)
    {
        sb.Append(' ', _indent * 4);
        sb.AppendLine(code);
    }
    #endregion

    public bfParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

    public bfParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
    : base(input, output, errorOutput)
    {
        Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
    }
    public partial class ProgramContext : ParserRuleContext
    {
        public ITerminalNode Eof() { return GetToken(bfParser.Eof, 0); }
        public BlockContext[] block()
        {
            return GetRuleContexts<BlockContext>();
        }
        public BlockContext block(int i)
        {
            return GetRuleContext<BlockContext>(i);
        }
        public ProgramContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_program; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IbfListener typedListener = listener as IbfListener;
            if (typedListener != null) typedListener.EnterProgram(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IbfListener typedListener = listener as IbfListener;
            if (typedListener != null) typedListener.ExitProgram(this);
        }
    }

    [RuleVersion(0)]
    public ProgramContext program()
    {
        ProgramContext _localctx = new ProgramContext(Context, State);
        EnterRule(_localctx, 0, RULE_program);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 15;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACKET) | (1L << PLUS) | (1L << MINUS) | (1L << LT) | (1L << GT) | (1L << OUT) | (1L << IN))) != 0))
                {
                    {
                        {
                            State = 12; block();
                        }
                    }
                    State = 17;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 18; Match(Eof);
            }
            Context.Stop = TokenStream.LT(-1);

            var temp = sb.ToString();
            _program = BeginPart + temp + EndPart;

        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class BlockContext : ParserRuleContext
    {
        public ITerminalNode LBRACKET() { return GetToken(bfParser.LBRACKET, 0); }
        public ITerminalNode RBRACKET() { return GetToken(bfParser.RBRACKET, 0); }
        public BlockContext[] block()
        {
            return GetRuleContexts<BlockContext>();
        }
        public BlockContext block(int i)
        {
            return GetRuleContext<BlockContext>(i);
        }
        public ListOfPlusContext listOfPlus()
        {
            return GetRuleContext<ListOfPlusContext>(0);
        }
        public ListOfMinusContext listOfMinus()
        {
            return GetRuleContext<ListOfMinusContext>(0);
        }
        public ListOfLtContext listOfLt()
        {
            return GetRuleContext<ListOfLtContext>(0);
        }
        public ITerminalNode GT() { return GetToken(bfParser.GT, 0); }
        public ITerminalNode IN() { return GetToken(bfParser.IN, 0); }
        public ITerminalNode OUT() { return GetToken(bfParser.OUT, 0); }
        public BlockContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_block; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IbfListener typedListener = listener as IbfListener;
            if (typedListener != null) typedListener.EnterBlock(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IbfListener typedListener = listener as IbfListener;
            if (typedListener != null) typedListener.ExitBlock(this);
        }
    }

    [RuleVersion(0)]
    public BlockContext block()
    {
        BlockContext _localctx = new BlockContext(Context, State);
        EnterRule(_localctx, 2, RULE_block);
        int _la;
        try
        {
            State = 39;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case LBRACKET:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 20; Match(LBRACKET);
                        push_back("while(data[cursor] != 0) {"); _indent++;
                        State = 25;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACKET) | (1L << PLUS) | (1L << MINUS) | (1L << LT) | (1L << GT) | (1L << OUT) | (1L << IN))) != 0))
                        {
                            {
                                {
                                    State = 22; block();
                                }
                            }
                            State = 27;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 28; Match(RBRACKET);
                        _indent--; push_back("}");
                    }
                    break;
                case PLUS:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 30; listOfPlus();
                    }
                    break;
                case MINUS:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 31; listOfMinus();
                    }
                    break;
                case LT:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 32; listOfLt();
                    }
                    break;
                case GT:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 33; Match(GT);
                        push_back("cursor = (cursor + 1) % data.Length;");
                    }
                    break;
                case IN:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 35; Match(IN);
                        push_back("data[cursor] = (char)Console.Read();");
                    }
                    break;
                case OUT:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 37; Match(OUT);
                        push_back("Console.Write(data[cursor]);");
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ListOfPlusContext : ParserRuleContext
    {
        public ITerminalNode[] PLUS() { return GetTokens(bfParser.PLUS); }
        public ITerminalNode PLUS(int i)
        {
            return GetToken(bfParser.PLUS, i);
        }
        public ListOfPlusContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_listOfPlus; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IbfListener typedListener = listener as IbfListener;
            if (typedListener != null) typedListener.EnterListOfPlus(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IbfListener typedListener = listener as IbfListener;
            if (typedListener != null) typedListener.ExitListOfPlus(this);
        }
    }

    [RuleVersion(0)]
    public ListOfPlusContext listOfPlus()
    {
        ListOfPlusContext _localctx = new ListOfPlusContext(Context, State);
        EnterRule(_localctx, 4, RULE_listOfPlus);

        int n = 0;

        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 41; Match(PLUS);
                n++;
                State = 47;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 3, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 43; Match(PLUS);
                                n++;
                            }
                        }
                    }
                    State = 49;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 3, Context);
                }
            }
            Context.Stop = TokenStream.LT(-1);

            push_back($"data[cursor] += (char){n};");

        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ListOfMinusContext : ParserRuleContext
    {
        public ITerminalNode[] MINUS() { return GetTokens(bfParser.MINUS); }
        public ITerminalNode MINUS(int i)
        {
            return GetToken(bfParser.MINUS, i);
        }
        public ListOfMinusContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_listOfMinus; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IbfListener typedListener = listener as IbfListener;
            if (typedListener != null) typedListener.EnterListOfMinus(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IbfListener typedListener = listener as IbfListener;
            if (typedListener != null) typedListener.ExitListOfMinus(this);
        }
    }

    [RuleVersion(0)]
    public ListOfMinusContext listOfMinus()
    {
        ListOfMinusContext _localctx = new ListOfMinusContext(Context, State);
        EnterRule(_localctx, 6, RULE_listOfMinus);

        int n = 0;

        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 50; Match(MINUS);
                n++;
                State = 56;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 4, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 52; Match(MINUS);
                                n++;
                            }
                        }
                    }
                    State = 58;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 4, Context);
                }
            }
            Context.Stop = TokenStream.LT(-1);

            push_back($"data[cursor] -= (char){n};");

        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ListOfLtContext : ParserRuleContext
    {
        public ITerminalNode[] LT() { return GetTokens(bfParser.LT); }
        public ITerminalNode LT(int i)
        {
            return GetToken(bfParser.LT, i);
        }
        public ListOfLtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_listOfLt; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IbfListener typedListener = listener as IbfListener;
            if (typedListener != null) typedListener.EnterListOfLt(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IbfListener typedListener = listener as IbfListener;
            if (typedListener != null) typedListener.ExitListOfLt(this);
        }
    }

    [RuleVersion(0)]
    public ListOfLtContext listOfLt()
    {
        ListOfLtContext _localctx = new ListOfLtContext(Context, State);
        EnterRule(_localctx, 8, RULE_listOfLt);

        int n = 0;

        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 59; Match(LT);
                n++;
                State = 65;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 5, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 61; Match(LT);
                                n++;
                            }
                        }
                    }
                    State = 67;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 5, Context);
                }
            }
            Context.Stop = TokenStream.LT(-1);

            push_back($"cursor = (cursor + data.Length - {n}) % data.Length;");

        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ListOfGtContext : ParserRuleContext
    {
        public ITerminalNode[] GT() { return GetTokens(bfParser.GT); }
        public ITerminalNode GT(int i)
        {
            return GetToken(bfParser.GT, i);
        }
        public ListOfGtContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_listOfGt; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IbfListener typedListener = listener as IbfListener;
            if (typedListener != null) typedListener.EnterListOfGt(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IbfListener typedListener = listener as IbfListener;
            if (typedListener != null) typedListener.ExitListOfGt(this);
        }
    }

    [RuleVersion(0)]
    public ListOfGtContext listOfGt()
    {
        ListOfGtContext _localctx = new ListOfGtContext(Context, State);
        EnterRule(_localctx, 10, RULE_listOfGt);

        int n = 0;

        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 68; Match(GT);
                n++;
                State = 74;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == GT)
                {
                    {
                        {
                            State = 70; Match(GT);
                            n++;
                        }
                    }
                    State = 76;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
            Context.Stop = TokenStream.LT(-1);

            push_back($"cursor = (cursor + {n}) % data.Length;");

        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    private static char[] _serializedATN = {
        '\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
        '\x5964', '\x3', '\v', 'P', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t',
        '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6',
        '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\a', '\x2', '\x10',
        '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x13', '\v', '\x2', '\x3', '\x2',
        '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x1A',
        '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1D', '\v', '\x3', '\x3', '\x3',
        '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3',
        '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3',
        '\x5', '\x3', '*', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
        '\x3', '\x4', '\a', '\x4', '\x30', '\n', '\x4', '\f', '\x4', '\xE', '\x4',
        '\x33', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3',
        '\x5', '\a', '\x5', '\x39', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '<',
        '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a',
        '\x6', '\x42', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x45', '\v', '\x6',
        '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'K', '\n',
        '\a', '\f', '\a', '\xE', '\a', 'N', '\v', '\a', '\x3', '\a', '\x2', '\x2',
        '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x2', '\x2', 'U',
        '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x4', ')', '\x3', '\x2', '\x2',
        '\x2', '\x6', '+', '\x3', '\x2', '\x2', '\x2', '\b', '\x34', '\x3', '\x2',
        '\x2', '\x2', '\n', '=', '\x3', '\x2', '\x2', '\x2', '\f', '\x46', '\x3',
        '\x2', '\x2', '\x2', '\xE', '\x10', '\x5', '\x4', '\x3', '\x2', '\xF',
        '\xE', '\x3', '\x2', '\x2', '\x2', '\x10', '\x13', '\x3', '\x2', '\x2',
        '\x2', '\x11', '\xF', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3',
        '\x2', '\x2', '\x2', '\x12', '\x14', '\x3', '\x2', '\x2', '\x2', '\x13',
        '\x11', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\a', '\x2', '\x2',
        '\x3', '\x15', '\x3', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\a',
        '\x3', '\x2', '\x2', '\x17', '\x1B', '\b', '\x3', '\x1', '\x2', '\x18',
        '\x1A', '\x5', '\x4', '\x3', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2',
        '\x2', '\x1A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3',
        '\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C',
        '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2',
        '\x2', '\x1E', '\x1F', '\a', '\x4', '\x2', '\x2', '\x1F', '*', '\b', '\x3',
        '\x1', '\x2', ' ', '*', '\x5', '\x6', '\x4', '\x2', '!', '*', '\x5', '\b',
        '\x5', '\x2', '\"', '*', '\x5', '\n', '\x6', '\x2', '#', '$', '\a', '\b',
        '\x2', '\x2', '$', '*', '\b', '\x3', '\x1', '\x2', '%', '&', '\a', '\n',
        '\x2', '\x2', '&', '*', '\b', '\x3', '\x1', '\x2', '\'', '(', '\a', '\t',
        '\x2', '\x2', '(', '*', '\b', '\x3', '\x1', '\x2', ')', '\x16', '\x3',
        '\x2', '\x2', '\x2', ')', ' ', '\x3', '\x2', '\x2', '\x2', ')', '!', '\x3',
        '\x2', '\x2', '\x2', ')', '\"', '\x3', '\x2', '\x2', '\x2', ')', '#',
        '\x3', '\x2', '\x2', '\x2', ')', '%', '\x3', '\x2', '\x2', '\x2', ')',
        '\'', '\x3', '\x2', '\x2', '\x2', '*', '\x5', '\x3', '\x2', '\x2', '\x2',
        '+', ',', '\a', '\x5', '\x2', '\x2', ',', '\x31', '\b', '\x4', '\x1',
        '\x2', '-', '.', '\a', '\x5', '\x2', '\x2', '.', '\x30', '\b', '\x4',
        '\x1', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', '\x3',
        '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31',
        '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\a', '\x3', '\x2', '\x2',
        '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a',
        '\x6', '\x2', '\x2', '\x35', ':', '\b', '\x5', '\x1', '\x2', '\x36', '\x37',
        '\a', '\x6', '\x2', '\x2', '\x37', '\x39', '\b', '\x5', '\x1', '\x2',
        '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', '<', '\x3', '\x2',
        '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3',
        '\x2', '\x2', '\x2', ';', '\t', '\x3', '\x2', '\x2', '\x2', '<', ':',
        '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\a', '\x2', '\x2', '>', '\x43',
        '\b', '\x6', '\x1', '\x2', '?', '@', '\a', '\a', '\x2', '\x2', '@', '\x42',
        '\b', '\x6', '\x1', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x42',
        '\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2',
        '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\v', '\x3',
        '\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46',
        'G', '\a', '\b', '\x2', '\x2', 'G', 'L', '\b', '\a', '\x1', '\x2', 'H',
        'I', '\a', '\b', '\x2', '\x2', 'I', 'K', '\b', '\a', '\x1', '\x2', 'J',
        'H', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\x3', '\x2', '\x2', '\x2',
        'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2',
        'M', '\r', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2',
        '\x2', '\t', '\x11', '\x1B', ')', '\x31', ':', '\x43', 'L',
    };

    public static readonly ATN _ATN =
        new ATNDeserializer().Deserialize(_serializedATN);


}
